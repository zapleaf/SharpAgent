@page "/play/{Id:guid}"

@using SharpAgent.Domain.Extensions

@rendermode InteractiveServer

<script src="https://www.youtube.com/iframe_api"></script>

<script>
    // Global variable to store the YouTube player
    var youtubePlayer;

    // Function called when YouTube API is ready
    function onYouTubeIframeAPIReady() {
        console.log('YouTube API Ready');

        // Wait a moment to ensure DOM is fully loaded
        setTimeout(initializePlayer, 1000);
    }

    // Initialize the player by creating a new YT.Player instance
    function initializePlayer() {
        console.log('Initializing player...');

        // Get the existing iframe element
        var iframe = document.getElementById('player');

        if (!iframe) {
            console.error('Player iframe not found');
            return;
        }

        // Get the video ID from the iframe src
        var src = iframe.src;
        var videoId = extractVideoId(src);

        console.log('Found video ID:', videoId);

        // Create a new div to replace the iframe
        var newDiv = document.createElement('div');
        newDiv.id = 'youtube-player-container';
        iframe.parentNode.replaceChild(newDiv, iframe);

        // Create a new player instance
        youtubePlayer = new YT.Player('youtube-player-container', {
            videoId: videoId,
            playerVars: {
                'enablejsapi': 1,
                'rel': 0
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // Extract video ID from YouTube URL
    function extractVideoId(url) {
        var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
        var match = url.match(regExp);
        return (match && match[7].length == 11) ? match[7] : null;
    }

    // Called when the player is ready
    function onPlayerReady(event) {
        console.log('Player ready event fired');
        console.log('Player state:', event.target.getPlayerState());
        event.target.playVideo();
    }

    // Called when player state changes
    function onPlayerStateChange(event) {
        console.log('Player state changed to:', event.data);
    }

    // Function to get current playback time
    function getCurrentTime() {
        console.log('getCurrentTime called');

        if (youtubePlayer && typeof youtubePlayer.getCurrentTime === 'function') {
            var time = youtubePlayer.getCurrentTime();
            console.log('Current time:', time);
            return time;
        }

        console.log('Player not ready or getCurrentTime not available');
        return 0;
    }

    // Check if player is initialized - for debugging
    function isPlayerInitialized() {
        return {
            playerExists: !!youtubePlayer,
            hasGetCurrentTimeMethod: youtubePlayer && typeof youtubePlayer.getCurrentTime === 'function',
            playerState: youtubePlayer ? youtubePlayer.getPlayerState() : 'No player',
            currentTime: youtubePlayer && typeof youtubePlayer.getCurrentTime === 'function' ? youtubePlayer.getCurrentTime() : 'N/A'
        };
    }
</script>

<style>
    .embed-responsive {
        position: relative;
        display: block;
        width: 100%;
        padding: 0;
        overflow: hidden;
    }

        .embed-responsive::before {
            content: "";
            display: block;
            padding-top: 56.25%; /* 16:9 aspect ratio */
        }

    .embed-responsive-item {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: 0;
    }

    /* Add these rules to ensure the card properly contains the video */
    .card {
        overflow: hidden;
    }

    /* Make sure the YouTube API player also fills the container */
    #youtube-player-container,
    #youtube-player-container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
</style>

<!-- START of Main Content -->
<div class="content">
    @if (video?.Id != Guid.Empty)
    {
        <div class="row gx-lg-9 mt-3">
            <div class="col-md-8 px-2">
                <div class="card mb-4">
                    <div class="card-body p-sm-2">
                        <div class="embed-responsive embed-responsive-16by9">
                            <iframe id="player" class="embed-responsive-item"
                                    src="@($"https://www.youtube.com/embed/{video.YTId}?enablejsapi=1&rel=0&origin={Uri.EscapeDataString(NavigationManager.BaseUri)}")"
                                    title="YouTube video player" frameborder="0"
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                    allowfullscreen>
                            </iframe>
                        </div>
                    </div>
                </div>

                <!-- START of Main Channel Card -->
                <div class="col">
                    <div class="card mb-4">
                        <div class="card-body p-3 p-sm-3">
                            <div class="mb-2 border-bottom">
                                <div class="col-12">
                                    <h5 class="text-white fw-bold line-clamp-2 mb-0 mt-0">@WebUtility.HtmlDecode(video.Title)</h5>
                                    <div class="d-flex align-items-center mt-2 mb-2">
                                        <h5 class="text-body text-nowrap mb-0">@video.ChannelTitle</h5>
                                        <h6 class="text-body fw-normal text-nowrap mb-0">
                                            @if (video.ChannelSubscriberCount < 0)
                                            {
                                                <text>&nbsp; -&nbsp; @video.ChannelSubscriberCount.ToEstimateString() Subs</text>
                                            }
                                        </h6>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center mt-2 mb-2">
                                        <h6 class="text-body fw-normal text-nowrap mb-0">@video.ViewCount.ToEstimateString() Views - @video.PublishedAt.ToTimeAgo() - @video.Duration.ToMinuteString()</h6>
                                    </div>
                                </div>
                            </div>

                            <div class="row justify-content-between align-items-end pb-0 mb-0 g-3">
                                <div class="col-12 col-sm-auto">
                                    <div class="d-flex align-items-center">
                                        <div>
                                            <button type="button" class="btn btn-outline-primary p-2">
                                                <span class="fw-semibold">Set As Watched</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-sm-auto">
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                <!-- END of Main Channel Card -->
            </div>
            <div class="col-md-4 px-2">
                <h4 class="mb-1 text-body-highlight fs-xxl-6">Current Notes:</h4>
                <div class="mb-4">
                    <textarea class="form-control" @bind="video.Notes" id="exampleTextarea" rows="5"></textarea>
                </div>
                <h4 class="mb-1 text-body-highlight fs-xxl-6">Add a New Note:</h4>
                <div class="mb-0">
                    <textarea class="form-control" @bind="note" id="exampleTextarea" rows="5"></textarea>
                </div>
                <div class="text-end mt-3">
                    <button type="button" class="btn btn-outline-primary p-2" @onclick="AddNote">Add Note</button>
                </div>
            </div>
        </div>

    }
    <!-- START of Main Content -->
    <!-- END of Main Content -->

    <footer class="footer position-absolute">
        <div class="row g-0 justify-content-between align-items-center h-100">
            <div class="col-12 col-sm-auto text-center">
                <p class="mb-0 mt-2 mt-sm-0 text-body">
                    2023 ©Artemis One
                </p>
            </div>
            <div class="col-12 col-sm-auto text-center">
                <p class="mb-0 text-body-tertiary text-opacity-85"></p>
            </div>
        </div>
    </footer>
</div>
<!-- END of Main Content -->