using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System.Net.Http.Headers;
using System.Text;

using SharpAgent.Application.IServices;
using SharpAgent.Domain.Models;

namespace SharpAgent.Infrastructure.Services;

public class TranscriptService : ITranscriptService
{
    private readonly HttpClient _httpClient;
    private readonly ILogger<TranscriptService> _logger;
    private readonly string _tokenId;

    public TranscriptService(
        IConfiguration configuration,
        ILogger<TranscriptService> logger)
    {
        if (configuration == null)
            throw new ArgumentNullException(nameof(configuration));

        _logger = logger ?? throw new ArgumentNullException(nameof(logger));

        _tokenId = configuration["Apify:TokenId"]
            ?? throw new InvalidOperationException("Apify:TokenId configuration is missing");

        _httpClient = new HttpClient();
        _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _tokenId);
    }

    public async Task<TranscriptResult> ScrapeVideoAsync(string videoUrl)
    {
        try
        {
            _logger.LogInformation($"Scraping YouTube video: {videoUrl}");

            // Prepare the request payload
            var requestPayload = new
            {
                downloadSubtitles = true,
                preferAutoGeneratedSubtitles = true,
                subtitlesLanguage = "en",
                startUrls = new[]
                {
                    new
                    {
                        url = videoUrl,
                        method = "GET"
                    }
                }
            };

            var content = new StringContent(
                JsonConvert.SerializeObject(requestPayload),
                Encoding.UTF8,
                "application/json");

            // Send the request to Apify
            var request = new HttpRequestMessage(HttpMethod.Post, "https://api.apify.com/v2/acts/streamers~youtube-scraper/run-sync");
            request.Content = content;

            var response = await _httpClient.SendAsync(request);
            response.EnsureSuccessStatusCode();

            var responseContent = await response.Content.ReadAsStringAsync();
            var scraperResponse = JsonConvert.DeserializeObject<List<ApifyScraperResponse>>(responseContent);

            if (scraperResponse == null || !scraperResponse.Any())
            {
                _logger.LogWarning($"No data returned from Apify for video URL: {videoUrl}");
                return null;
            }

            var videoData = scraperResponse[0];

            // Map the response to our domain model
            var result = new TranscriptResult
            {
                VideoId = videoData.Id,
                Title = videoData.Title,
                ChannelId = videoData.ChannelId,
                ChannelName = videoData.ChannelName,
                ChannelUrl = videoData.ChannelUrl,
                SubscriberCount = videoData.NumberOfSubscribers,
                ViewCount = videoData.ViewCount,
                LikeCount = videoData.Likes,
                CommentCount = videoData.CommentsCount,
                Duration = videoData.Duration,
                PublishedAt = videoData.Date,
                Description = videoData.Text,
                Subtitles = GetSubtitleContent(videoData.Subtitles)
            };

            _logger.LogInformation($"Successfully scraped video: {videoUrl}");
            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error scraping YouTube video {videoUrl}: {ex.Message}");
            throw;
        }
    }

    private string GetSubtitleContent(List<ApifySubtitle> subtitles)
    {
        if (subtitles == null || !subtitles.Any())
            return null;

        // Prefer auto-generated English subtitles
        var subtitle = subtitles.FirstOrDefault(s => s.Language == "en" && s.Type == "auto_generated")
                     ?? subtitles.FirstOrDefault();

        return subtitle?.Srt;
    }
}

public class ApifyScraperResponse
{
    public string Id { get; set; }
    public string Title { get; set; }
    public string Url { get; set; }
    public string ThumbnailUrl { get; set; }
    public int ViewCount { get; set; }
    public DateTime Date { get; set; }
    public int Likes { get; set; }
    public string ChannelName { get; set; }
    public string ChannelUrl { get; set; }
    public string ChannelId { get; set; }
    public long NumberOfSubscribers { get; set; }
    public string Duration { get; set; }
    public int CommentsCount { get; set; }
    public string Text { get; set; }
    public List<ApifySubtitle> Subtitles { get; set; }
}

public class ApifySubtitle
{
    public string SrtUrl { get; set; }
    public string Type { get; set; }
    public string Language { get; set; }
    public string Srt { get; set; }
}